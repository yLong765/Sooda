<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on Sooda</title>
    <link>https://yinl.fun/tags/graphics/</link>
    <description>Recent content in Graphics on Sooda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 22 Sep 2018 23:34:11 +0800</lastBuildDate>
    
	<atom:link href="https://yinl.fun/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图形学Prelin噪声解析</title>
      <link>https://yinl.fun/posts/%E5%9B%BE%E5%BD%A2%E5%AD%A6prelin%E5%99%AA%E5%A3%B0%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 22 Sep 2018 23:34:11 +0800</pubDate>
      
      <guid>https://yinl.fun/posts/%E5%9B%BE%E5%BD%A2%E5%AD%A6prelin%E5%99%AA%E5%A3%B0%E8%A7%A3%E6%9E%90/</guid>
      <description>Prelin噪声 Prelin噪声由Ken Perlin在1983年提出，因参与制作迪士尼的动画电影《电子世界争霸战》，但不满于当时那种非常不自然的纹理效果，而提出了Perlin噪声 本篇文章借鉴各路大神的文章总结而来：
 冯乐乐：【图形学】谈谈噪声 则卷大明：Unity3D教程：PerlinNoise原理及实现 Unity API：Mathf.PerlinNoise  此文章源码在我的个人GitHub上，本文章的仅仅实现了Prelin噪声中的最简单版本。上图先~
利用Unity实现2D Prelin噪声 candycat的文章非常好，不过没有Unity的具体实现代码，而则卷大明的文章中只给出了一部分的代码。最后发现了Unity自带2D噪声，所以结合多方文章最终完成了最简单的Prelin噪声。
如果你懂GLSL的pixel shaders，那你就可以直接去阅读由iq大神写的：Voronoise。而这里我只是用Unity代码还原冯乐乐博客中利用shaderToy编写的代码
在开始正文之前，我们得知道几个数学小知识。图形学中涉及矩阵计算的东西有太多，在ShaderToy中都有封装，而Unity并没有，所以我们得实现几个图形学函数
Floor：向下取整
private static Vector2 Floor(Vector2 p){return new Vector2(Mathf.Floor(p.x), Mathf.Floor(p.y));}Fract：取小数部分
private static Vector2 Fract(Vector2 p){return p - Floor(p);}Sin：正弦函数
private static Vector2 Sin(Vector2 p){return new Vector2(Mathf.Sin(p.x), Mathf.Sin(p.y));}其实这些函数在Unity中也有实现，不过我这里要实现2D的噪声，所以得处理2D情况下的操作。接下来就是正片了~ 首先还原冯乐乐博客中的梯度函数
private static Vector2 Hash22(Vector2 p){p = new Vector2(Vector2.Dot(p, new Vector2(127.1f, 311.7f)),Vector2.Dot(p, new Vector2(269.</description>
    </item>
    
  </channel>
</rss>