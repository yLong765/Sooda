<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on Sooda</title>
    <link>https://yLong765.github.io/tags/math/</link>
    <description>Recent content in Math on Sooda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 07 Apr 2019 22:48:28 +0800</lastBuildDate>
    
	<atom:link href="https://yLong765.github.io/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>判断点在多边形内部</title>
      <link>https://yLong765.github.io/posts/%E5%88%A4%E6%96%AD%E7%82%B9%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%E9%83%A8/</link>
      <pubDate>Sun, 07 Apr 2019 22:48:28 +0800</pubDate>
      
      <guid>https://yLong765.github.io/posts/%E5%88%A4%E6%96%AD%E7%82%B9%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%E9%83%A8/</guid>
      <description>点在多边形内部的判断有很多种方法，性能最好也准确的算法应属射线法。
推荐Milo Yip大神的知乎上的回答
射线法思想 射线法是由从点出发向一个方向发送射线，判断与边相交的次数，如果为奇数则为多边形的内部，如果为偶数则为外部。
首先是数据类，存储多边形的点和最大最小的XY，用来做快速判断
// 多边形点的数据存储class PolygonConfig{public float maxX;public float maxY;public float minX;public float minY;public List&amp;lt;Vector2&amp;gt; points = new List&amp;lt;Vector2&amp;gt;();public void SetMaxAndMinXY(){if (points.Count &amp;gt; 0){maxX = points[0].x;maxY = points[0].y;minX = points[0].x;minY = points[0].y;}for (int i = 1; i &amp;lt; points.Count; i++){maxX = Mathf.Max(maxX, points[i].x);maxY = Mathf.Max(maxY, points[i].y);}}}下面是判断的核心方法</description>
    </item>
    
  </channel>
</rss>