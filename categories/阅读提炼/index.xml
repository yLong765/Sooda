<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阅读提炼 on Alaya - Simple Life Simple Coding</title>
    <link>https://sooda.net.cn/categories/%E9%98%85%E8%AF%BB%E6%8F%90%E7%82%BC/</link>
    <description>Recent content in 阅读提炼 on Alaya - Simple Life Simple Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Aug 2022 16:25:27 +0800</lastBuildDate><atom:link href="https://sooda.net.cn/categories/%E9%98%85%E8%AF%BB%E6%8F%90%E7%82%BC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# 特性</title>
      <link>https://sooda.net.cn/post/clrviacsharp-attribute/</link>
      <pubDate>Mon, 22 Aug 2022 16:25:27 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-attribute/</guid>
      <description>定制特性 自定义特性其实就是将一些附加信息与某个目标元素关联起来的方式。编译器在托管模块的元数据中生成(嵌入)这些额外的信息。</description>
    </item>
    
    <item>
      <title>C# 委托</title>
      <link>https://sooda.net.cn/post/clrviacsharp-delegate/</link>
      <pubDate>Thu, 18 Aug 2022 16:55:54 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-delegate/</guid>
      <description>在非委托C/C++中，非成员函数的地址只是一个内存地址。这个地址不携带任何额外信息。它们很轻量但是不是类型安全的。 委托使用方式 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>C# 数组</title>
      <link>https://sooda.net.cn/post/clrviacsharp-array/</link>
      <pubDate>Thu, 18 Aug 2022 14:09:37 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-array/</guid>
      <description>CLR支持一维、多维和交错数组。所有数组都隐式地从System.Array抽象类派生，后者又派生自System.Object。这意味着数组始</description>
    </item>
    
    <item>
      <title>C# 枚举和标志位</title>
      <link>https://sooda.net.cn/post/clrviacsharp-enum/</link>
      <pubDate>Thu, 18 Aug 2022 10:23:40 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-enum/</guid>
      <description>枚举类型 枚举类型定义了一组“符号名称/值”的配对。且是强类型的。 1 2 3 4 5 enum Color { White, // 赋值0 Red, // 赋值1 Green, // 赋值2 } 每个枚举类型都是从Syste</description>
    </item>
    
    <item>
      <title>C# 接口</title>
      <link>https://sooda.net.cn/post/clrviacsharp-interface/</link>
      <pubDate>Mon, 08 Aug 2022 17:28:55 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-interface/</guid>
      <description>接口实际只是对一组方法签名进行了统一命名。这些方法不提供任何实现。类通过指定接口名称来继承接口，而且必须显式实现接口方法，否则CLR会认为此</description>
    </item>
    
    <item>
      <title>C# 泛型</title>
      <link>https://sooda.net.cn/post/clrviacsharp-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sun, 07 Aug 2022 15:38:51 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型(generic)是CLR和变成语言提供的一种特殊机制，它支持另一种形式的代码重用，即“算法重用”。 CLR允许创建泛型引用类型和泛型值类</description>
    </item>
    
    <item>
      <title>C# Class成员</title>
      <link>https://sooda.net.cn/post/clrviacsharp-class%E6%88%90%E5%91%98/</link>
      <pubDate>Wed, 27 Jul 2022 15:20:36 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-class%E6%88%90%E5%91%98/</guid>
      <description>类型成员基础 常量：数据恒定不变的符号。 字段：只读或可读/可写的数据值。 实例构造器：将新对象的实例字段初始化的特殊方法 类型构造器：将类型的静态</description>
    </item>
    
    <item>
      <title>C# 基元类型、引用类型和值类型</title>
      <link>https://sooda.net.cn/post/clrviacsharp-%E5%9F%BA%E5%85%83%E5%BC%95%E7%94%A8%E5%80%BC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 12 Jul 2022 17:49:41 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-%E5%9F%BA%E5%85%83%E5%BC%95%E7%94%A8%E5%80%BC%E7%B1%BB%E5%9E%8B/</guid>
      <description>Type基础 C#中有三种类型分别是基元类型、引用类型和值类型 基元类型 编辑器直接支持的数据类型称为基元类型(primitive type)。基元</description>
    </item>
    
    <item>
      <title>C# class及成员基础</title>
      <link>https://sooda.net.cn/post/clrviacsharp-class/</link>
      <pubDate>Tue, 28 Jun 2022 17:09:01 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-class/</guid>
      <description>class System.Object “运行时”所有的类型最终都从System.Object类型派生。 1 2 3 4 5 // 隐式派生自Object class A {} // 显式派生自Object class A : System.Object</description>
    </item>
    
    <item>
      <title>C# CLR基础</title>
      <link>https://sooda.net.cn/post/clrviacsharp-clr%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 16 Jun 2022 11:16:04 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/clrviacsharp-clr%E5%9F%BA%E7%A1%80/</guid>
      <description>CLR的执行模型 公共语言运行时(Common Language Runtime, CLR)是一个可由多种编程语言使用的“运行时”。CLR的核心功能(比如内存管理、程序集加载、</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》人工智能篇</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AF%87/</link>
      <pubDate>Wed, 19 Jan 2022 21:58:45 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AF%87/</guid>
      <description>搜索空间的表示 最简单的寻路设计就是将图作为数据结构。图中包含多个节点，连接相邻的点组成边。图有多种表示方式，最简单的是邻接表 游戏世界用图表示</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》摄像机篇</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E6%91%84%E5%83%8F%E6%9C%BA%E7%AF%87/</link>
      <pubDate>Fri, 14 Jan 2022 21:58:45 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E6%91%84%E5%83%8F%E6%9C%BA%E7%AF%87/</guid>
      <description>摄像机的基础属性 视场 观看世界的角度和广度，称为视场(FOV)。人双目并视大约能看到120°的视场，而剩余的视场在边缘能够发现运动，但不清晰 如</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》物理篇</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E7%89%A9%E7%90%86%E7%AF%87/</link>
      <pubDate>Tue, 04 Jan 2022 21:58:45 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E7%89%A9%E7%90%86%E7%AF%87/</guid>
      <description>平面 平面在游戏中倾向的数学定义： $$ P \cdot \hat{n} + d = 0 $$ $P$是平面上任意一点，$\hat{n}$是平面法线，$d$是平面到原点的最小距离 1 2 3 4</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》输入和声音篇</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E8%BE%93%E5%85%A5%E5%92%8C%E5%A3%B0%E9%9F%B3%E7%AF%87/</link>
      <pubDate>Fri, 24 Dec 2021 08:55:57 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E8%BE%93%E5%85%A5%E5%92%8C%E5%A3%B0%E9%9F%B3%E7%AF%87/</guid>
      <description>游戏输入 可分为两种：数字与模拟 数字输入 只用两种状态：“按下”和“没有按”（例如键盘） 如何实现一直按着的判断？ 同时跟踪上一帧和这一帧的状态，根</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》渲染篇</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E6%B8%B2%E6%9F%93%E7%AF%87/</link>
      <pubDate>Wed, 22 Dec 2021 15:57:24 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7%E6%B8%B2%E6%9F%93%E7%AF%87/</guid>
      <description>闲话 近日读完了《游戏编程算法与技巧》这本书。更感觉是《游戏引擎架构》的缩略图。先阅读此书会对游戏开发有一个整体的认识与理解。适合需要了解游戏</description>
    </item>
    
    <item>
      <title>《Unity实战》总结</title>
      <link>https://sooda.net.cn/post/unity%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 07 Nov 2021 22:05:19 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/unity%E5%AE%9E%E6%88%98/</guid>
      <description>闲话 本文意加强对Unity的一些知识点的补充，所以基本以记录为主。 零散知识 Unity使用左手坐标系 所有场景对象都是类GameObject的实</description>
    </item>
    
    <item>
      <title>《游戏引擎架构》动画的基本构成</title>
      <link>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84%E5%8A%A8%E7%94%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%84%E6%88%90/</link>
      <pubDate>Sun, 07 Nov 2021 17:14:24 +0800</pubDate>
      
      <guid>https://sooda.net.cn/post/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84%E5%8A%A8%E7%94%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%84%E6%88%90/</guid>
      <description>闲话 近日读完了《游戏引擎架构》这本书，以前感觉读不完，但是每天慢慢的磨完了。闲下来时间提炼一下其中自我觉得比较关键的部分。因本人是做Unit</description>
    </item>
    
  </channel>
</rss>
