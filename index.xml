<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sooda</title>
    <link>https://sooda.net.cn/</link>
    <description>Recent content on Sooda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 06 May 2021 22:09:58 +0800</lastBuildDate><atom:link href="https://sooda.net.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lua GC 原理</title>
      <link>https://sooda.net.cn/posts/luagc%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 06 May 2021 22:09:58 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/luagc%E5%8E%9F%E7%90%86/</guid>
      <description>梳理概念(作者: Cloud)  垃圾回收(garbage collection) 内存分配(allocation) free-list bump-pointer 垃圾识别(identification) 引用计数(reference counting) 追踪(tracing，或追踪式回收，即tracing collection) 内存回收(reclamation) sweep-to-free-list(适用于free-list) compaction(适用于bump-pointer) evacuation(适用于bump-pointer) GC算法 朴素引用计数(native RC)：free-list + RC + sweep-to-free-list 标记清楚(mark-sweep)：free-list + tracing + sweep-to-free-list 标记压缩(mark-compact)：bump-pointer + tracing + compaction 半空间(semi-space)：bump-pointer + tracing + evacuation 分代垃圾回收(generational collection)：的年轻代可以用一个专用的空间存放然后evacuate，也可以不用单独的空间，而是用一个标志位（sticky bit）来表示。还有一些内存分配、释放的方法是基于区块（region）的，在区块内bump pointer，区块本身用free-list管理，兼有两者的优点。新的一些算法，比如C4、G1、Immix、Shenandoah、ZGC还有Android Oreo的JVM里的GC，都是基于区块的算法。  正文  Lua的运行时对象都在注册表间接引用的table中，要么在执行栈上（注册表引用主线程，执行栈在线程内） Lua虚拟机工作时产生的对象都被串在一个链表上组成根集合(root set)，而被根集合间接引用的对象都会保留，剩下的对象会在恰当的时机回收。虚拟机的根集合包含注册表以及原生类型的metatable  标记并清扫(mark-and-sweep)-&amp;gt;Lua 5.0  Lua5.0以前用&amp;quot;标记并清扫(mark-and-sweep)&amp;ldquo;垃圾回收器。这个收集器会为了完整的垃圾收集周期而暂停与主程序交互。由4个阶段组成 标记(mark)：将&amp;quot;根集合(root set)&amp;ldquo;中对象标记为&amp;quot;活跃(alive)&amp;quot;。根集合为lua可直接访问的对象(注册表和主线程对象)。然后将根集合对象可访问到的对象都标记为&amp;quot;活跃&amp;rdquo;。所有可达对象都为&amp;quot;活跃&amp;rdquo; 整理(cleaning)：lua遍历所有userdata，把所有未标记且具有__gc元方法的userdata标记为&amp;quot;活跃&amp;quot;，并放入单独的列表。遍历所有的弱引用table，并根据弱引用设置删除其中未被标记的key和value 清扫(sweep)：lua遍历所有对象，未被标记的对象就回收。否则就清除标记，为下一周期做准备 收尾(finalization)：根据整理阶段生成的列表调用它们的终结函数。最后才进行调用是为了简化错误处理。因为，有问题的终结函数可能会抛出错误。而垃圾回收期不能在收集阶段停下。如果在这个阶段停止，则不会有问题。因为下一个周期还会调用留在列表中的userdata的终结函数。userdata有一个单向标记，如果__gc方法调用过，就标记执行，即使在__gc中复活（重新被根集引用），在下次回收时也不会再调用__gc  增量式(分步式)GC-&amp;gt;Lua 5.1  在虚拟机的正常指令逻辑间分步运行，尽量把每步的执行时间减到合理的范围 解决分步式GC的对象引用改变问题：Lua采用三色标记算法来解决，每一个对象都有三个状态： 白色：无法被访问到的对象。之后要被回收的部分 灰色：可访问到，但没有递归扫描完的对象。黑色和白色的边界 黑色：完全扫描过的对象。需要保留的部分 始终成立的条件： 所有根集引用的对象要么是黑色，要么是灰色（因白色一定是未引用的） 黑色对象不可能指向白色（在同一时刻，白色肯定不会被黑色引用，但有可能被灰色引用） 理想的收集过程：遍历灰色部分对象，将他们转变为黑色对象。所有灰色对象消失，收集过程就完成了 打破理想的收集过程：因为垃圾收集是分步式的，所以可能在两次收集之间会有黑色对象引用白色对象的操作。在所有赋值的地方插入一个write barrier来检查，保证状态正确 Lua用两种方式维持状态： 白色对象变为灰色(forward)。对应API：luaC_barrier 黑色对象变为灰色(backward)。对应API：luaC_barrierback 采用哪个方法维持状态是凭经验决定的 扫描后期会留下反复的灰色对象（黑色对象因barrier检查变回灰色），这些对象放到原子步骤(一次性)递归遍历，最后再遍历所有堆栈。包括清理弱表（弱表中至少一个白色对象引用）、分离出带__gc的对象。尽量减少__gc对象，和弱表的使用，从而减少原子步骤的时间，从而减少GC停顿  工作方式  GC的步进与虚拟机新分配内存有关。虚拟机不分配内存，GC是不会自动运行的。 GC的发生时机：默认是2倍上次GC后的内存使用量。可由LUA_GCSETPAUSE设置 GC的推进速度：默认是2倍于新增内存的速度。可由LUA_GCSETSTEPMUL设置 Lua用扫描内存的字节数和清理内存的字节数作为工作进度的标准 优点：减少每次GC工作时的停顿时间，但无法减少GC带来的额外开销 缺点：增加了GC的时间成本（会有额外的Barrier开销）和空间成本（未能及时回收不再使用的内存）  分代式GC-&amp;gt;5.</description>
    </item>
    
    <item>
      <title>Unity内存详解</title>
      <link>https://sooda.net.cn/posts/unity%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 06 May 2021 22:09:58 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/unity%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/</guid>
      <description>什么是内存  物理内存 移动设备没有独立显存，显存与内存公用 CPU访问数据，先从cache中找，如果cache miss则从内存中拿一段连续的指令到cache中。所以减少cache miss的方式就是尽量让数据连续 虚拟内存 移动设备没有内存交换（I/O速度慢，存储卡可擦写次数少） IOS中用内存压缩技术，压缩不活跃的内存，给活跃的App来使用 Android 内存管理 基本管理单位 - Page 4K per page：基本已4k为一个单位分配（不一定4k对齐） 用户态和内核态：完全隔离 内存管理工具（内存杀手）- low memory killer(AKA lmk) 安卓系统优先级：Native(系统内核) &amp;gt; System(系统级服务) &amp;gt; Persistent(用户级服务) &amp;gt; Foreground(前台应用，当前正在使用的) &amp;gt; Perceptible(辅助应用) &amp;gt; Service(后台服务) &amp;gt; Home(桌面) &amp;gt; Pervious(前一个使用过的应用) &amp;gt; Cache(缓存应用，后台) 内存不够时，killer调用，从底层到上层一层一层杀进程。直到有空余内存，或者杀到System让手机重启 内存指标 - *SS Resident Set Size(RSS)：当前使用APP所应用的所有内存(包括调用公共库分配给当前APP的内存) Proportional Set Size(PSS)：当前APP使用的内存和公共库分配的平摊内存 Unique Set Size(USS)：当前APP使用的内存  Unity的内存  Unity是一个C++引擎 底层完全是由C++写成 用户代码可以用il2cpp转成cpp代码 VM来进行跨平台 Unity内存按照分配方式分为 Native Memory：本机内存 Managed Memory：托管内存 Editor与Runtime的逻辑不通 Editor会在打开编辑器时就加载所有的资源，为了方便编辑 Runtime会在用到loadAsset时才会加载资源 Unity内存按照管理者分为 引擎管理内存 用户管理内存 Unity检测不到的内存：用户分配的native内存 Unity Native Memory管理 memory label：当前这一块内存要分配到哪一块类型池里 Allocator：Unity底层封装的分配内存函数，根据memory label分配到不同的池里边 NewAsRoot：生成Allocator，比如一个ShaderRoot 导致Native内存增长的因素 Scene里有过多的GameObject Audio DSP buffer：声音缓冲，填满buffer才会向CPU发送播放声音请求。为了避免频繁调用导致I/O耗时问题。buffer过大会导致声音延迟，因为很久才能填满buffer。buffer过小会导致CPU负担上升 Force to mono：强制单声道，减少一半内存 Format Compression Format：声音在内存的形态，压缩，解压，流式等 Code Size：滥用泛型代码，编译时展开速度过慢并且还占内存 AssetBundle TypeTree：处理不同版本间的序列化差异问题，如果用同样版本的编辑器生成的Runtime和AssetBundle，可以关闭TyepTree。有三个优点： 省内存。 减少AssetBundle包体大小 build和runtime会变快，(反)序列化变快。不关闭则会序列化两次，一次TypeTree一次实际内容 压缩方式 Lz4：快10倍，但是比Lzma包体大30% 大小和数量：玄学问题，按照自身项目实际情况决定 Resoures(官方建议不要再使用)： 会有一个头部进行索引(AssetBundle也有)。用的R-B Tree(红黑树)算法。资源很多树就很大，在游戏开始时就会加载到内存中并不能卸载，造成持续内存压力，并拖慢启动时间 Texture upload buffer：缓存，同DSP buffer。填满就向CPU push一次 r/w：用不到就不需要开启，因会在内存和显存中有两份 Mip Maps：UI就不需要开启了 Mesh r/w：同上 compression：有些版本开会比不开占用内存大 Managed Memory VM内存池 VM会返还内存给OS(操作系统)：当一块内存Block连续六次没有被GC访问的则会返回给OS GC机制 Boehm回收机制 Non-generational（非分代式） ：速度快 Non-compacting（非压缩式）：不进行碎片整理，速度快 下一代GC Incremental GC（渐进式GC）：分帧暂停主线程进行GC SGen：分代GC IL2CPP：升级版本的Boehm Memory fragmentation（内存碎片化） Zombie Memory（僵尸内存）：无用内存、没有释放的内存。通过代码管理和性能工具分析 建议： 用Destory显示释放，用NULL可能不会回收内存 对于高频调用的部分写池 少用闭包和匿名函数 少用协成，如果不释放会把所有内容全部常驻内存 减少配置表大小 单例 避免SetActive的消耗：把物体位置移到屏幕外  参考视频 浅谈Unity内存管理</description>
    </item>
    
    <item>
      <title>CSharp托管堆和垃圾回收</title>
      <link>https://sooda.net.cn/posts/csharp%E6%89%98%E7%AE%A1%E5%A0%86%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Thu, 06 May 2021 21:43:19 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/csharp%E6%89%98%E7%AE%A1%E5%A0%86%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>CLR访问一个资源所需要的步骤  调用IL指令newobj，为代表资源的类型分配内存（C#的new操作符） 初始化内存，设置初始状态并使资源可用。类型的实例构造器负责设置初始状态 访问类型的成员来使用资源（有必要可以重复） 摧毁资源的状态以进行清理 释放内存。垃圾回收器独自负责这一步  从托管堆分配资源  CLR要求所有对象都从托管堆分配。进程初始化时，CLR规划出一个地址空间区域作为托管堆。CLR还要维护一个指针。该指针指向下一个对象在堆中的分配位置。刚开始的时候，指针位置设为地址空间区域的基地址 一个区域被非垃圾对象填满后，CLR会分配更多的区域。这个过程一直重复，直至整个进程地址空间都被填满。所以，你的应用程序的内存受进程的虚拟地址空间的限制。32位最多分配1.5GB，64位最多分配8TB new操作符导致CLR执行以下步骤： 计算类型的字段（以及从基类型继承的字段）所需的字节数 加上对象的开销所需要的字节数。每个对象都有两个开销字段：类型对象指针和同步快索引。32位为8字节，64位为16字节 CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递指针），new操作符返回对象引用。就在返回这个引用之前，指针的值会加上对象占用的字节数来得到一个新值，既下一个对象放入托管堆时的地址。 对于托管堆，分配对象只需要在指针上加一个值——速度相当快。 由于托管堆在内存中连续分配对象，所以会因为引用的“局部化”（locality）而获得性能上的提升（注：缓存命中）。具体的说，这意味着进程的工作集会非常小，应用程序只需要很少的内存，从而提高了速度。还意味着代码使用的对象可以全部驻留在CPU缓存中。结果就是应用程序能以惊人的速度访问这些对象，因为CPU在执行大多数操作时，不会因为“缓存未命中”（cache miss）而被迫访问较慢的RAM  垃圾回收算法  引用计数算法 微软的“组件对象模型”（Component Object Model，COM）就是引用计数。堆上的每个对象都维护这一个内存字段来统计程序中多少“部分”正在使用对象。随着每一个“部分”到达代码中某个不在需要对象的地方，就递减对象的计数字段。计数字段变成0，对象就可以从内存中删除了。许多引用计数系统最大的问题就是处理不好循环利用 引用跟踪算法 CLR使用一种引用跟踪算法。引用跟踪算法只关心引用类型的变量，只有变量能引用堆上的对象。将所有引用类型变量都称为根 开始GC：暂停进程中的所有线程。防止线程在CLR检查期间访问对象并更改其状态 GC标记阶段： CLR遍历堆中所有对象，将同步索引字段中的一位设为0。表明所有对象都应该删除 CLR检查所有活动根，查看他们引用了哪些对象。任何根引用了堆上的对象，CLR都会标记那个对象，将同步索引中的一位设为1 一个对象被标记后，CLR会检查那个对象中的根，标记他们引用的对象。 如果发现对象已经标记，就不重新检查对象的字段。避免循环引用产生的死循 检查完毕后，堆中对象要么已标记，要么未标记。已标记不能回收，这种对象为可达（reachable）的。未标记回收，这种对象为不可达（unreachable）的 GC压缩（compact，注：碎片整理）阶段。CLR对堆中已标记的对象进行地址位移，使他们占用连续的内存空间（注：大对象堆中的对象不会压缩，所以还是会发生碎片化） 计算对象地址偏移位置。引用对象的根压缩后引用的还是最初内存中的位置，而非移动之后的位置。CLR要从每一个根减去所引用对象在内存中偏移的字节数。保证根还是引用和之前一样的对象；只是对象在内存中变换了位置 托管堆的指针指向最有一个幸存对象之后的位置 （注：静态字段引用的对象一直存在，直到用于加载类型的AppDomain卸载为止） 垃圾回收和调试 堆中存在一个Timer对象会造成一个线程池线程定期调用一个方法，导致垃圾回收会回收掉之后未调用的Timer对象。 C#编辑器的/debug模式编译程序集的时候，编辑器会应用System.Diagnostics.DebuggableAttribulte，并为结果程序集设置DebuggingMods的DisableOptimizations标志。运行时编译方法时，JIT编译器会看到这个标志，把根的生命周期延长至方法结束（Release模式无效）  public static void Main() { // 2000毫秒就调用一次TimerCallback方法的Timer对象 Timer t = new Timer(TimerCallback, null, 0, 2000); // 等待用户按Enter键 Console.ReadLine(); // 在ReadLine之后引用t(会被优化掉) // t = null; // 正确方式 t.Dispose(); } private static void TimerCallback(Object o) { Console.</description>
    </item>
    
    <item>
      <title>CSharpSocket和protpBuf新手村教程</title>
      <link>https://sooda.net.cn/posts/csharpsocket%E5%92%8Cprotpbuf%E6%96%B0%E6%89%8B%E6%9D%91%E6%95%99%E7%A8%8B/</link>
      <pubDate>Tue, 04 Jun 2019 23:29:22 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/csharpsocket%E5%92%8Cprotpbuf%E6%96%B0%E6%89%8B%E6%9D%91%E6%95%99%E7%A8%8B/</guid>
      <description>Boss-&amp;gt;Socket 此教程纯属Socket初级应用篇，因为网上全是理论篇（实践才是王道）
1级-&amp;gt;Client创建   首先创建一个C#命令行工程（别告诉这个不会）
  创建Socket实例，别忘了引用System.Net和System.Net.Sockets
Socket client = new Socket(SocketType.Stream, ProtocolType.Tcp); // TCP链接  Socket    设置要链接的服务器ip地址，IPAddress是C#提供的ip封装类
IPAddress ip = IPAddress.Parse(&amp;#34;127.0.0.1&amp;#34;); // 本地地址127.0.0.1（别说你不知道）  IPAddress    设置要链接的服务器ip和端口，IPEndPoint是C#提供的ip和端口的封装类
IPEndPoint point = new IPEndPoint(ip, 2333); // 端口为2333，ip为上一段代码的ip   链接
client.Connect(point); // client.Connect(&amp;#34;127.0.0.1&amp;#34;, 2333); // 等同于3,4   开启线程接收服务器消息，别忘了引用System.Threading
Thread thread = new Thread(Recive); thread.IsBackground = true; // 后台执行线程 thread.Start(client); // 传入客户端的Socket // Recive函数 static void Recive(object o) { var client = o as Socket; while (true) { byte[] buffer = new byte[1024 * 1024 * 2]; int effective = client.</description>
    </item>
    
    <item>
      <title>判断点在多边形内部</title>
      <link>https://sooda.net.cn/posts/%E5%88%A4%E6%96%AD%E7%82%B9%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%E9%83%A8/</link>
      <pubDate>Sun, 07 Apr 2019 22:48:28 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/%E5%88%A4%E6%96%AD%E7%82%B9%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%E9%83%A8/</guid>
      <description>点在多边形内部的判断有很多种方法，性能最好也准确的算法应属射线法。
推荐Milo Yip大神的知乎上的回答
射线法思想 射线法是由从点出发向一个方向发送射线，判断与边相交的次数，如果为奇数则为多边形的内部，如果为偶数则为外部。
首先是数据类，存储多边形的点和最大最小的XY，用来做快速判断
// 多边形点的数据存储 class PolygonConfig { public float maxX; public float maxY; public float minX; public float minY; public List&amp;lt;Vector2&amp;gt; points = new List&amp;lt;Vector2&amp;gt;(); public void SetMaxAndMinXY() { if (points.Count &amp;gt; 0) { maxX = points[0].x; maxY = points[0].y; minX = points[0].x; minY = points[0].y; } for (int i = 1; i &amp;lt; points.Count; i++) { maxX = Mathf.Max(maxX, points[i].x); maxY = Mathf.Max(maxY, points[i].y); } } } 下面是判断的核心方法</description>
    </item>
    
    <item>
      <title>Unity Framework</title>
      <link>https://sooda.net.cn/posts/unity-framework/</link>
      <pubDate>Fri, 23 Nov 2018 22:35:04 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/unity-framework/</guid>
      <description>Unity 框架 本文UI框架借鉴游客学院
本文章源码可在我的GitHub中找到
UI框架 UI框架简介 本框架用的UGUI，比较难做出3D效果的界面，3D特效界面还是用NGUI好一些。SceneLogin、SceneMain、SceneTest是演示的三个界面。
框架流程Scene 打开界面通过SceneMgr。SceneMgr会调用SceneBase中的OnInit。数据会传输到sceneDates不定长数组里。界面初始化会如下依次执行
 InitDate()：必须设置UI皮肤（UI的prefab），界面没有生成前的初始化数据。 InitSkin()：会自动执行，创建UI实例。 InitViewDate()：界面生成完后，绑定界面UI的初始化。（如我想知道玩家输入的名字叫什么，可以绑定Text获取，注：Button已经被绑定完成不需要重写绑定）。  其他可重写函数
 onClick(GameObject BtObject)：相应Button事件，通过传入的BtObject分辨每个Button。  SceneLogin.cs代码
public class SceneLogin : SceneBase { private InputField playerName; private Text warnText; protected override void InitDate() { //初始化皮肤  setSkinPath(&amp;#34;UI/Scene/&amp;#34; + SceneType.SceneLogin.ToString()); } protected override void InitViewDate() { //绑定界面UI  playerName = skin.transform.Find(&amp;#34;loginBackground/playerName&amp;#34;).GetComponent&amp;lt;InputField&amp;gt;(); warnText = skin.transform.Find(&amp;#34;warnText&amp;#34;).GetComponent&amp;lt;Text&amp;gt;(); } protected override void onClick(GameObject BtObject) { if (BtObject.name.Equals(&amp;#34;BtGameStart&amp;#34;)) { string name = playerName.text; if (NameChick(name)) { SceneMgr.</description>
    </item>
    
    <item>
      <title>图形学Prelin噪声解析</title>
      <link>https://sooda.net.cn/posts/%E5%9B%BE%E5%BD%A2%E5%AD%A6prelin%E5%99%AA%E5%A3%B0%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 22 Sep 2018 23:34:11 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/%E5%9B%BE%E5%BD%A2%E5%AD%A6prelin%E5%99%AA%E5%A3%B0%E8%A7%A3%E6%9E%90/</guid>
      <description>Prelin噪声 Prelin噪声由Ken Perlin在1983年提出，因参与制作迪士尼的动画电影《电子世界争霸战》，但不满于当时那种非常不自然的纹理效果，而提出了Perlin噪声 本篇文章借鉴各路大神的文章总结而来：
 冯乐乐：【图形学】谈谈噪声 则卷大明：Unity3D教程：PerlinNoise原理及实现 Unity API：Mathf.PerlinNoise  此文章源码在我的个人GitHub上，本文章的仅仅实现了Prelin噪声中的最简单版本。上图先~
利用Unity实现2D Prelin噪声 candycat的文章非常好，不过没有Unity的具体实现代码，而则卷大明的文章中只给出了一部分的代码。最后发现了Unity自带2D噪声，所以结合多方文章最终完成了最简单的Prelin噪声。
如果你懂GLSL的pixel shaders，那你就可以直接去阅读由iq大神写的：Voronoise。而这里我只是用Unity代码还原冯乐乐博客中利用shaderToy编写的代码
在开始正文之前，我们得知道几个数学小知识。图形学中涉及矩阵计算的东西有太多，在ShaderToy中都有封装，而Unity并没有，所以我们得实现几个图形学函数
Floor：向下取整
private static Vector2 Floor(Vector2 p) { return new Vector2(Mathf.Floor(p.x), Mathf.Floor(p.y)); } Fract：取小数部分
private static Vector2 Fract(Vector2 p) { return p - Floor(p); } Sin：正弦函数
private static Vector2 Sin(Vector2 p) { return new Vector2(Mathf.Sin(p.x), Mathf.Sin(p.y)); } 其实这些函数在Unity中也有实现，不过我这里要实现2D的噪声，所以得处理2D情况下的操作。接下来就是正片了~ 首先还原冯乐乐博客中的梯度函数
private static Vector2 Hash22(Vector2 p) { p = new Vector2(Vector2.Dot(p, new Vector2(127.1f, 311.7f)), Vector2.Dot(p, new Vector2(269.</description>
    </item>
    
    <item>
      <title>贝塞尔曲线</title>
      <link>https://sooda.net.cn/posts/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</link>
      <pubDate>Sat, 22 Sep 2018 23:32:36 +0800</pubDate>
      
      <guid>https://sooda.net.cn/posts/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</guid>
      <description>本文章借鉴自Unity中的曲线绘制.
贝塞尔曲线(Bézier curve)是由法国数学家Pierre Bézier所提出,类似于Photoshop软件中的钢笔工具,不过钢笔工具仅仅只是用了二阶贝塞尔曲线.
原理 在我们写代码之前还是了解一下原理为好,所以贝塞尔曲线的原理就是利用经过所有直线上的点的差值来进行绘制,如图为二阶曲线

下面给出二阶曲线的公式,P0,P1,P2为示例图上三点,t为差值数据:
\[ B(t) = (1 - t)^2P_0 + 2t(1 - t)P_1 + t^2P_2 , t\epsilon[0,1] \]
而一阶曲线自然就是一个直线,公式为:
\[ B(t) = P_0 + (P_1 - P_0)t = (1 - t)P_0 + tP_1 , t\epsilon[0,1] \]
从中我们可以发现规律从而推导到n阶的公式:
\[ B(t) = \sum_{i=0}^nPi(1 -t)^{n-i}t^i , t\epsilon[0,1] \]
而我们要在Scene窗口绘制出贝塞尔曲线,所以这里用到Editor类下的OnInspectorGUI函数绘制Inspector窗口中的贝塞尔曲线配置,OnSceneGUI函数中绘制真正的贝塞尔曲线,绘制方式我们利用Handles函数进行直线模拟曲线方式的绘制.
代码 首先我们需要一个数据类Curve,存储简单的Vector3数组
// 贝塞尔曲线数据 public Vector3[] points; 然后我们需要一个Editor类这里我们起名为CurveTool,继承自Editor并重写刚才说的两个函数,此处代码不懂可以看我之前写过的文章: Unity编辑器
public override void OnInspectorGUI() { serializedObject.Update(); EditorGUILayout.BeginVertical(); EditorGUILayout.PropertyField(points, new GUIContent(&amp;#34;坐标组&amp;#34;), true); EditorGUILayout.</description>
    </item>
    
  </channel>
</rss>
